// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  points        Int       @default(0)
  role          Role    @default(USER) // เพิ่ม role
  accounts      Account[]
  sessions      Session[]

  Redemption Redemption[]
}
enum Role {
  ADMIN
  USER
}


model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Reward {
  id          String   @id @default(cuid())
  name        String
  description String?
  image       String?
  points      Int
  stock       Int
  createdAt   DateTime @default(now())

  Redemption Redemption[]
}

model Redemption {
id        String   @id @default(cuid())
user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
userId    String
reward Reward @relation(fields: [rewardId], references: [id], onDelete: Cascade)
rewardId  String
createdAt DateTime @default(now())
status    Status   @default(PENDING) // เพิ่มสถานะ

}
enum Status {
  PENDING  // รอรับของ
  COMPLETED // ได้รับของแล้ว
}

<<<<<<< HEAD

// enum TokenStatus {
//   unused
//   used
//   expired
// }
=======
enum TokenStatus {
  unused
  used
  expired
}
>>>>>>> origin/dev-1

model QRToken {
  id          String      @id @default(cuid())
  token       String      @unique
<<<<<<< HEAD
  // tokenStatus TokenStatus @default(unused)
  createdAt   DateTime    @default(now())
  expiresAt   DateTime
  updatedAt   DateTime    @updatedAt
  used Boolean @default(false) // เพิ่มฟิลด์ used
  PETbig      Int         @default(0) // Add this field
  PETsmall    Int         @default(0) // Add this field
  points      Int         @default(0) // Add the points field
=======
  tokenStatus TokenStatus @default(unused)
  createdAt   DateTime    @default(now())
  expiresAt   DateTime
  used        Boolean  @default(false)
>>>>>>> origin/dev-1
}